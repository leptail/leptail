[workspace]
members = ["app", "frontend", "server"]
#workspace.resolver = "2"

# build 
# [build]
# rustflags = ["-Z", "threads=8"]

# profiles
# [profile.dev]
# opt-level = 1

# [profile.dev.package."*"]
# opt-level = 3

[profile.release]
# need to be applied only to wasm build
codegen-units = 1
lto = true
opt-level = 'z'




# dependencies
[workspace.dependencies]
leptos = { version = "0.6.9", features = ["nightly"] }
leptos_meta = { version = "0.6.9", features = ["nightly"] }
leptos_router = { version = "0.6.9", features = ["nightly"] }
leptos_axum = { version = "0.6.9" }
leptos_icons = { version = "0.3.0", features = [] }
icondata = "0.3.0"
tailwind_fuse = { version = "0.3.0" }

leptail = { path = "../leptail" }
leptail_theme_moonlight = { path = "../theme-moonlight" }
leptail_theme_gradiance = { path = "../theme-gradiance" }


axum = "0.7"
cfg-if = "1.0.0"
console_error_panic_hook = "0.1.7"
console_log = "1.0.0"
http = "1"
log = "0.4.21"
simple_logger = "4.3.3"
thiserror = "1.0.58"
tokio = { version = "1.36.0", features = ["full"] }
tower = { version = "0.4.13", features = ["full"] }
tower-http = { version = "0.5", features = ["full"] }
wasm-bindgen = "=0.2.92"
web-sys = "0.3.64"

# sutttle related
# shuttle deploment is not working properly; 
# follow the reference here https://github.com/leptos-community/deployment-ssr-shuttle
shuttle-runtime = { version = "0.43.0", default-features = false }
shuttle-axum = { version = "0.43.0" }


# Optimizing build for wasm bundle size; 
# See https://book.leptos.dev/deployment/binary_size.html for more details
[profile.wasm-release]
inherits = "release"
opt-level = 'z'
lto = true
codegen-units = 1


# Leptos configurations
# See https://github.com/akesson/cargo-leptos for documentation of all the parameters.
# A leptos project defines which workspace members
# that are used together frontend (lib) & server (bin)
[[workspace.metadata.leptos]]
# this name is used for the wasm, js and css file names
name = "start-axum-workspace"

# the package in the workspace that contains the server binary (binary crate)
bin-package = "server"

# the package in the workspace that contains the frontend wasm binary (library crate)
lib-package = "frontend"

# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"

# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"

# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
style-file = "style/main.scss"
# tailwind-input-file = "style/tailwind.css"
# The tailwind input file.
#
# Optional, Activates the tailwind build
tailwind-input-file = "style/tailwind.css"

# The tailwind config file.
#
# Optional, defaults to "tailwind.config.js" which if is not present
# is generated for you
# tailwind-config-file = "tailwind.config.moonlight.js"
# tailwind-config-file = "tailwind.config.gradiance.js"
tailwind-config-file = "tailwind.config.js"

# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "public"

# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3000"

# The port to use for automatic reload monitoring
reload-port = 3001

# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"

#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"

# Set by cargo-leptos watch when building with that tool. Controls whether autoreload JS will be included in the head
watch = false

# The environment Leptos will run in, usually either "DEV" or "PROD"
# env = "DEV"
env = "PROD"

# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = []

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = []

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

# Optimizing for wasm bundle size. 
# See https://book.leptos.dev/deployment/binary_size.html for more details
lib-profile-release = "wasm-release"

# [[workspace.metadata.leptos.styles]]
# # Main style file. If scss or sass then it will be compiled to css.
# # the parent folder will be watched for changes
# file = "style/output.css"
# # A https://browsersl.ist query
# browserquery = "defaults"